<?php


namespace App\Controllers;


use App\Models\CartItems;
use App\Models\Orders;
use App\Models\OrdersItems;
use App\Models\Users;
use Core\DAO;
use Core\Flash;
use Core\View;

class Cart extends \Core\Controller
{
    /**
     * Hàm này dùng để hiển thị danh sách các mặt hàng trong giỏ hàng
     */
    public function indexAction(){
        //display the cart list
        $cartItems = CartItems::getAll();
        View::renderTemplate('Cart/index.twig',['cartItems'=>$cartItems]);
    }

    public function addAction(){
        $itemId = $this->route_params['id'];
        $em = DAO::getEntityManager();
        $itemRepo = DAO::getEntityManager()->getRepository('App\Models\Items');
        $userRepo = DAO::getEntityManager()->getRepository('App\Models\Users');
        $cartRepo = DAO::getEntityManager()->getRepository('App\Models\CartItems');
        $item = $itemRepo->find($itemId);

        $itemName = $item->getName();
        if($item->getAvailableQuantity() < 1){
            Flash::addMessage("This items ($itemName) is out of stock!");
            $this->redirect('/items');
        }

        $user = $userRepo->find($_SESSION['user_id']);

        $cartItem = $cartRepo->findOneBy(['user'=>$user, 'item'=>$item]);
        $cartItem = $cartItem ?? new CartItems($user, $item, 0);

        $cartItem->addQuantity(1);

        $em->persist($cartItem);
        $em->flush();

        Flash::addMessage("Item '$itemName' added to cart!");
        $this->redirect('/items');
    }

    public function removeAction(){
        $itemId = $this->route_params['id'];
        $em = DAO::getEntityManager();
        $itemRepo = DAO::getEntityManager()->getRepository('App\Models\Items');
        $cartRepo = DAO::getEntityManager()->getRepository('App\Models\CartItems');
        $item = $itemRepo->find($itemId);
        $cart = $cartRepo->findOneBy(['item'=>$item,'user'=>Users::getCurrentUser()]);
        if($cart == null){
            Flash::addMessage("No item!", Flash::WARNING);
            $this->redirect('/cart');
        }
        $em->remove($cart);
        $em->flush();
        Flash::addMessage("Item removed!", Flash::WARNING);
        $this->redirect('/cart');
    }

    public function checkoutAction(){
        if(!isset($_POST['submit'])){
            $this->redirect('/cart');
        }
        $cartItems = CartItems::getAll();

        if(count($cartItems) == 0){
            $this->redirect('/');
        }

        $total = 0;
        $user = $cartItems[0]->getUser();
        $user_funds = $user->getAvailableFunds();
        //preliminary check
        foreach ($cartItems as $cartItem){
            //check if items stock has enough
            $item = $cartItem->getItem();
            $itemName = $item->getName();
            if($item->getAvailableQuantity() < $cartItem->getQuantity()){
                Flash::addMessage("Item $itemName's stock is not enough, please remove it!", Flash::WARNING);
                $this->redirect("/cart");
            }
            //calculate things
            $price = $cartItem->getItem()->getPrice();
            $quantity = $cartItem->getQuantity();
            if($_SESSION['vip_status'] == 'yes'){
                $price = $price * 0.7;
            }
            $total += $price * $quantity;
        }

        if($total > $user_funds){
            Flash::addMessage("You don't have enough funds to purchase!", Flash::WARNING);
            $this->redirect("/cart");
            exit();
        }

        //actual ordering
        $em = DAO::getEntityManager();
        $user->setAvailableFunds($user->getAvailableFunds() - $total);

        $order = new Orders($total, '', $user);
        $em->persist($order);
        $em->flush();
        foreach ($cartItems as $cartItem){
            $price = $cartItem->getItem()->getPrice();
            $quantity = $cartItem->getQuantity();
            $applied_price = $price;
            if($_SESSION['vip_status'] == 'yes'){
                $applied_price = $price * 0.7;
            }

            $orderItem = new OrdersItems($quantity, $applied_price, $price, $cartItem->getItem(), $order);
            $em->persist($orderItem);
            $em->remove($cartItem);

            $item = $cartItem->getItem();
            $item->setAvailableQuantity($item->getAvailableQuantity() - $cartItem->getQuantity());
        }
        $em->flush();
        Flash::addMessage("Thank you for shopping with us! Your order number is ".$order->getId().".");
        $this->redirect('/items');
    }

    protected function before()
    {
        parent::before();
        $this->requireLogin();
    }
}