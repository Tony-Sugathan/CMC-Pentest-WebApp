<?php


namespace App\Controllers;


use App\Models\Transactions;
use Core\DAO;
use Core\View;

class Transfer extends \Core\Controller
{
    public function indexAction($error = []){
        View::renderTemplate('Transfer/index.twig', ['error'=>$error]);
    }

    public function transferAction(){
        //POST transfer to another person
        $recipient_username = $_POST['recipient'];
        $amount = $_POST['amount'];
        $em = DAO::getEntityManager();
        $repo = $em->getRepository('App\Models\Users');
        $current_user = $repo->find($_SESSION['user_id']);
        $recipient = $repo->findOneBy(['username'=>$recipient_username]);
        $error = [];
        if(!$recipient){
            $error['username_err'] = "User $recipient_username doesn't exists";
        }

        if($amount < 0 || $amount > $current_user->getAvailableFunds()){
            $error['amount_err'] = "Not enough funds! Add more to transfer $amount Ä‘";
        }

        if(count($error) == 0){ //no error
            $current_user->addFunds(- $amount);
            $recipient->addFunds($amount);
            $transaction = new Transactions($current_user->getUsername(), $recipient_username, $amount);
            $em->persist($transaction);
            $em->flush();
            $this->redirect('/transfer');
        }
        $this->indexAction($error);
    }

    public function addFundsAction(){
        //POST add funds to account through mobile card
        $provider = $_POST['provider'];
        $card_id = $_POST['card_id'];
        $amount = 0;
        $error = [];
        switch ($card_id[0]){
            case '1': $amount = 10000;break;
            case '2': $amount = 20000;break;
            case '3': $amount = 50000;break;
            case '4': $amount = 100000;break;
            case '5': $amount = 200000;break;
            case '6': $amount = 500000;break;
            default:
                $error['card_id_err'] = "Invalid card!";
        }

        if(count($error) == 0){
            $em = DAO::getEntityManager();
            $repo = $em->getRepository('App\Models\Users');
            $current_user = $repo->find($_SESSION['user_id']);
            $current_user->addFunds($amount);
            $transaction = new Transactions($provider." ".$card_id, $current_user->getUsername(), $amount);
            $em->persist($transaction);
            $em->flush();
            $this->redirect('/transfer');
        }
        $this->indexAction($error);
    }

    public function getVipAction(){
        //upgrade to VIP
        $vip_month = $_POST['vip-month'];
        $amount = 0;
        $error = [];
        switch ($vip_month){
            case 1: $amount = 100000; break;
            case 6: $amount = 550000; break;
            case 12: $amount = 1000000; break;
            default:
                $error['get_vip_err'] = "An error occurred!";
        }

        $em = DAO::getEntityManager();
        $repo = $em->getRepository('App\Models\Users');
        $current_user = $repo->find($_SESSION['user_id']);

        if($amount > $current_user->getAvailableFunds()){
            $error['get_vip_err'] = "You don't have enough funds!";
        }

        if(count($error) == 0){
            $current_user->addFunds(-$amount);
            $now = time();
            $current_vip_status = $current_user->getVipStatus();
            if($current_vip_status == null || $current_vip_status->getTimestamp() < $now){
                $current_vip_status = new \DateTime();
                $current_vip_status->setTimestamp($now + 60*60*24*30*$vip_month);
                $current_user->setVipStatus($current_vip_status);
            }else{
                $newVipTimestamp = ($current_user->getVipStatus()->getTimestamp() + 60*60*24*30*$vip_month);
                $current_vip_status = new \DateTime();
                $current_vip_status->setTimestamp($newVipTimestamp);
                $current_user->setVipStatus($current_vip_status);
            }
            $transaction = new Transactions($current_user->getUsername(), "Get VIP $vip_month month.", $amount);
            $em->persist($transaction);
            $em->flush();
            $this->redirect('/transfer');
        }else{
            $this->indexAction($error);
        }
    }

    public function transactionHistoryAction(){
        //TODO display history
    }

    protected function before()
    {
        parent::before();
        $this->requireLogin();
    }
}