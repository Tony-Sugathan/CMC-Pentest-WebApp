<?php

namespace Core;

use Exception;

class Router
{
    /**
     * @var array Routing table
     */
    protected static array $routes = [];

    /**
     * Current route param
     * @var array
     */
    protected static array $params;

    public static function add($route, $params = [])
    {
//        $this->routes[$route] = $params;//simple
        //route: {controller}/{action}
        //replace / -> \/ - escape
        $route = preg_replace('/\//', '\\/', $route);
        //convert string var
        $route = preg_replace('/\{([a-z-]+)\}/', '(?<\1>[a-z-]+)', $route);

        // Convert variables with custom regular expressions e.g. {id:\d+}
        $route = preg_replace('/\{([a-z]+):([^\}]+)\}/', '(?P<\1>\2)', $route);
        $route = '/^' . $route . '$/i';

        self::$routes[$route] = $params;
    }

    /**
     * @return array
     */
    public static function getRoutes(): array
    {
        return self::$routes;
    }

    /**
     * @return array
     */
    public static function getParams(): array
    {
        return self::$params;
    }

    public static function dispatch($url)
    {
        $url = preg_replace('/\/$/', '', $url);
        if (self::match($url)) {
            $controller = self::$params["controller"];
            $controller = Helper::convertToStudlyCaps($controller);
            $controller = self::getNamespace() . "$controller";
            if (class_exists($controller)) {
                $controller_obj = new $controller(self::$params);
                $action = self::$params["action"];
                $action = Helper::convertToCamelCase($action);

                if (preg_match('/action$/i', $action) == 0) { //check if action ends with "Action"
                    $controller_obj->$action();
                } else {
                    throw new Exception("Method $action in $controller can not be called directly!", 404);
                }
            } else {
                throw new Exception("Class $controller not found!", 404);
            }
        } else {
            throw new Exception("No route matched!", 404);
        }
    }

    /**
     * Match a URL with the routing table
     * @param $url
     * @return bool
     */
    public static function match($url)
    {
        $url = Helper::removeQueryStringVariables($url);

        foreach (self::$routes as $route => $params) {
//            $pattern = '/^(?<controller>[a-z-]+)\/(?<action>[a-z-]+)$/';
            if (preg_match($route, $url, $matches)) {
                foreach ($matches as $key => $match) {
                    if (is_string($key)) {
                        $params[$key] = $match;
                    }
                }
                self::$params = $params;
                return true;
            }
        }
        return false;
    }

    /**
     * Get the namespace for the controller class. The namespace defined in the
     * route parameters is added if present.
     *
     * @return string The request URL
     */
    protected static function getNamespace()
    {
        $namespace = 'App\Controllers\\'; //Default namespace

        if (array_key_exists('namespace', self::$params)) {
            $namespace .= self::$params['namespace'] . '\\';
        }

        return $namespace;
    }
}